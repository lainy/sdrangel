/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube     ---   Limitations and specifcities:       * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 4.0.6
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGSDRdaemonSourceSettings.h
 *
 * SDRdaemonSource
 */

#ifndef SWGSDRdaemonSourceSettings_H_
#define SWGSDRdaemonSourceSettings_H_

#include <QJsonObject>


#include <QString>

#include "SWGObject.h"
#include "export.h"

namespace SWGSDRangel {

class SWG_API SWGSDRdaemonSourceSettings: public SWGObject {
public:
    SWGSDRdaemonSourceSettings();
    SWGSDRdaemonSourceSettings(QString* json);
    virtual ~SWGSDRdaemonSourceSettings();
    void init();
    void cleanup();

    virtual QString asJson () override;
    virtual QJsonObject* asJsonObject() override;
    virtual void fromJsonObject(QJsonObject &json) override;
    virtual SWGSDRdaemonSourceSettings* fromJson(QString &jsonString) override;

    qint32 getCenterFrequency();
    void setCenterFrequency(qint32 center_frequency);

    qint32 getSampleRate();
    void setSampleRate(qint32 sample_rate);

    qint32 getLog2Decim();
    void setLog2Decim(qint32 log2_decim);

    float getTxDelay();
    void setTxDelay(float tx_delay);

    qint32 getNbFecBlocks();
    void setNbFecBlocks(qint32 nb_fec_blocks);

    QString* getAddress();
    void setAddress(QString* address);

    qint32 getDataPort();
    void setDataPort(qint32 data_port);

    qint32 getControlPort();
    void setControlPort(qint32 control_port);

    QString* getSpecificParameters();
    void setSpecificParameters(QString* specific_parameters);

    qint32 getDcBlock();
    void setDcBlock(qint32 dc_block);

    qint32 getIqCorrection();
    void setIqCorrection(qint32 iq_correction);

    qint32 getFcPos();
    void setFcPos(qint32 fc_pos);

    QString* getFileRecordName();
    void setFileRecordName(QString* file_record_name);


    virtual bool isSet() override;

private:
    qint32 center_frequency;
    bool m_center_frequency_isSet;

    qint32 sample_rate;
    bool m_sample_rate_isSet;

    qint32 log2_decim;
    bool m_log2_decim_isSet;

    float tx_delay;
    bool m_tx_delay_isSet;

    qint32 nb_fec_blocks;
    bool m_nb_fec_blocks_isSet;

    QString* address;
    bool m_address_isSet;

    qint32 data_port;
    bool m_data_port_isSet;

    qint32 control_port;
    bool m_control_port_isSet;

    QString* specific_parameters;
    bool m_specific_parameters_isSet;

    qint32 dc_block;
    bool m_dc_block_isSet;

    qint32 iq_correction;
    bool m_iq_correction_isSet;

    qint32 fc_pos;
    bool m_fc_pos_isSet;

    QString* file_record_name;
    bool m_file_record_name_isSet;

};

}

#endif /* SWGSDRdaemonSourceSettings_H_ */
